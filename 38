import React, { createContext, useState, useContext, ReactNode } from 'react';
import { LucideIcon } from 'lucide-react';
import { RecurringClass } from '@/types';

export interface ContextMenuOption {
  label: string;
  action?: () => void;
  icon?: LucideIcon;
  isSeparator?: boolean;
  disabled?: boolean;
  isDestructive?: boolean;
}

interface ContextMenuState {
  x: number;
  y: number;
  options: ContextMenuOption[];
}

type ModalType = 
  | 'createRecurringClass' 
  | 'editRecurringClass' 
  | 'createBatch' 
  | 'editBatch'
  | 'createTutor'
  | 'editTutor'
  | 'createNotification'
  | 'confirmDelete'
  | 'duplicateSchedule'
  | null;

interface UIContextType {
  modal: ModalType;
  modalData: any;
  openModal: (modal: ModalType, data?: any) => void;
  closeModal: () => void;
  refreshData: () => void;
  triggerRefresh: number;
  isNotificationPanelOpen: boolean;
  toggleNotificationPanel: () => void;
  contextMenu: ContextMenuState | null;
  openContextMenu: (x: number, y: number, options: ContextMenuOption[]) => void;
  closeContextMenu: () => void;
  copiedClass: RecurringClass | null;
  setCopiedClass: (cls: RecurringClass | null) => void;
}

const UIContext = createContext<UIContextType | undefined>(undefined);

export const UIProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [modal, setModal] = useState<ModalType>(null);
  const [modalData, setModalData] = useState<any>(null);
  const [triggerRefresh, setTriggerRefresh] = useState(0);
  const [isNotificationPanelOpen, setIsNotificationPanelOpen] = useState(false);
  const [contextMenu, setContextMenu] = useState<ContextMenuState | null>(null);
  const [copiedClass, setCopiedClass] = useState<RecurringClass | null>(null);

  const openModal = (modalType: ModalType, data: any = null) => {
    setModalData(data);
    setModal(modalType);
  };
  
  const closeModal = () => {
    setModal(null);
    setModalData(null);
  };

  const refreshData = () => setTriggerRefresh(c => c + 1);

  const toggleNotificationPanel = () => setIsNotificationPanelOpen(prev => !prev);

  const openContextMenu = (x: number, y: number, options: ContextMenuOption[]) => {
    setContextMenu({ x, y, options });
  };

  const closeContextMenu = () => {
    setContextMenu(null);
  };

  return (
    <UIContext.Provider value={{ 
      modal, 
      modalData, 
      openModal, 
      closeModal, 
      refreshData, 
      triggerRefresh,
      isNotificationPanelOpen,
      toggleNotificationPanel,
      contextMenu,
      openContextMenu,
      closeContextMenu,
      copiedClass,
      setCopiedClass,
    }}>
      {children}
    </UIContext.Provider>
  );
};

export const useUI = (): UIContextType => {
  const context = useContext(UIContext);
  if (!context) {
    throw new Error('useUI must be used within a UIProvider');
  }
  return context;
};
