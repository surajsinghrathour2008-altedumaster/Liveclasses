import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';
import { Bell, X, CheckCheck, AlertTriangle } from 'lucide-react';
import { Notification } from '@/types';
import { getNotifications, markAllNotificationsAsRead } from '@/services/api';
import { useUI } from '@/context/UIContext';
import { Button } from './ui/Button';
import { Skeleton } from './ui/Skeleton';
import { cn } from '@/lib/utils';

interface NotificationPanelProps {
  isOpen: boolean;
  onClose: () => void;
}

const NotificationPanel: React.FC<NotificationPanelProps> = ({ isOpen, onClose }) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { triggerRefresh } = useUI();

  useEffect(() => {
    if (isOpen) {
      setIsLoading(true);
      setError(null);
      getNotifications()
        .then(setNotifications)
        .catch((err) => {
          setError('Failed to load notifications. Please try again.');
          console.error(err);
        })
        .finally(() => setIsLoading(false));
    }
  }, [isOpen, triggerRefresh]);

  const handleMarkAllAsRead = async () => {
    const unreadNotifications = notifications.filter(n => !n.is_read);
    if (unreadNotifications.length === 0) return;

    const promise = markAllNotificationsAsRead().then(() => {
      setNotifications(notifications.map(n => ({ ...n, is_read: true })));
    });

    toast.promise(promise, {
      loading: 'Marking as read...',
      success: 'All notifications marked as read!',
      error: 'Could not mark notifications as read.',
    });
  };

  return (
    <>
      <div 
        className={cn(
          "fixed inset-0 bg-black/60 z-40 backdrop-blur-sm transition-opacity",
          isOpen ? "opacity-100" : "opacity-0 pointer-events-none"
        )}
        onClick={onClose}
      />
      <div
        className={cn(
          "fixed top-0 right-0 h-full w-full max-w-md bg-gray-800 border-l border-gray-700 shadow-2xl z-50 transform transition-transform duration-300 ease-in-out",
          isOpen ? "translate-x-0" : "translate-x-full"
        )}
      >
        <div className="flex flex-col h-full">
          <div className="flex items-center justify-between p-4 border-b border-gray-700">
            <h2 className="text-xl font-semibold text-white">Notifications</h2>
            <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700 hover:text-white transition-colors">
              <X size={24} />
            </button>
          </div>
          
          <div className="flex-grow overflow-y-auto">
            {isLoading ? (
              <div className="p-4 space-y-4">
                {Array.from({ length: 5 }).map((_, i) => <Skeleton key={i} className="h-20 w-full" />)}
              </div>
            ) : error ? (
              <div className="flex flex-col items-center justify-center h-full text-center p-4">
                <AlertTriangle size={48} className="text-red-500 mb-4" />
                <h3 className="text-lg font-semibold text-white">An Error Occurred</h3>
                <p className="text-gray-400">{error}</p>
              </div>
            ) : notifications.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-full text-center p-4">
                <Bell size={48} className="text-gray-600 mb-4" />
                <h3 className="text-lg font-semibold text-white">All Caught Up!</h3>
                <p className="text-gray-400">You have no new notifications.</p>
              </div>
            ) : (
              <ul className="divide-y divide-gray-700">
                {notifications.map(n => (
                  <li key={n.id} className={cn("p-4", { "opacity-50": n.is_read })}>
                    <h4 className="font-semibold text-white">{n.title}</h4>
                    <p className="text-sm text-gray-300 mt-1">{n.message}</p>
                    <p className="text-xs text-gray-500 mt-2">{new Date(n.created_at).toLocaleString()}</p>
                  </li>
                ))}
              </ul>
            )}
          </div>

          <div className="p-4 border-t border-gray-700">
            <Button variant="secondary" className="w-full" onClick={handleMarkAllAsRead} disabled={isLoading || notifications.every(n => n.is_read)}>
              <CheckCheck size={16} className="mr-2" />
              Mark all as read
            </Button>
          </div>
        </div>
      </div>
    </>
  );
};

export default NotificationPanel;
