import React, { useEffect, useRef } from 'react';
import { cn } from '@/lib/utils';
import { ContextMenuOption, useUI } from '@/context/UIContext';

const ContextMenu: React.FC = () => {
  const { contextMenu, closeContextMenu } = useUI();
  const menuRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        closeContextMenu();
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [closeContextMenu]);

  if (!contextMenu) return null;

  const { x, y, options } = contextMenu;

  return (
    <div
      ref={menuRef}
      className="fixed z-50 bg-gray-800 border border-gray-700 rounded-md shadow-2xl p-1 animate-in fade-in-0 zoom-in-95"
      style={{ top: y, left: x }}
    >
      <ul>
        {options.map((option, index) => (
          <li key={index}>
            {option.isSeparator ? (
              <div className="h-px bg-gray-700 my-1" />
            ) : (
              <button
                onClick={() => {
                  option.action?.();
                  closeContextMenu();
                }}
                disabled={option.disabled}
                className={cn(
                  'w-full text-left flex items-center gap-2 px-3 py-1.5 text-sm rounded-sm transition-colors',
                  option.disabled
                    ? 'text-gray-500 cursor-not-allowed'
                    : 'text-gray-300 hover:bg-accent-start hover:text-white',
                  option.isDestructive && !option.disabled && 'text-red-400 hover:bg-red-500 hover:text-white'
                )}
              >
                {option.icon && <option.icon size={16} />}
                <span>{option.label}</span>
              </button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ContextMenu;
